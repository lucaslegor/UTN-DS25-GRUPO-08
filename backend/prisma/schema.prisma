generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  passwordHash String
  rol          RolUsuario    @default(USUARIO)
  createdAt    DateTime      @default(now())
  mail         String        @unique
  adminProfile AdminProfile?
  pedidos      Pedido[]
}

model AdminProfile {
  idAdmin   Int      @id @default(autoincrement())
  idUsuario Int      @unique
  nombre    String
  email     String   @unique
  telefono  String?
  activo    Boolean
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [idUsuario], references: [id])
}

model Producto {
  id           Int           @id @default(autoincrement())
  titulo       String
  descripcion  String
  cobertura    String
  tipo         TipoSeguro
  isActive     Boolean
  createdAt    DateTime      @default(now())
  precio       Float?        @db.Real
  itemsCarrito CarritoItem[]
  itemsPedido  PedidoItem[]
}

model Poliza {
  id         Int          @id @default(autoincrement())
  idPedido   Int          @unique
  archivoUrl String
  estado     EstadoPoliza @default(PENDIENTE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  pedido     Pedido       @relation(fields: [idPedido], references: [id])
}

model PedidoItem {
  idProducto Int
  idPedido   Int
  titulo     String
  precio     Decimal  @db.Money
  cantidad   Int
  pedido     Pedido   @relation(fields: [idPedido], references: [id])
  producto   Producto @relation(fields: [idProducto], references: [id])

  @@id([idPedido, idProducto])
}

model Pedido {
  id        Int          @id @default(autoincrement())
  idUsuario Int
  subtotal  Decimal      @db.Money
  total     Decimal      @db.Money
  moneda    Moneda       @default(ARS)
  estado    EstadoPedido @default(CREADO)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  pago      Pago?
  usuario   Usuario      @relation(fields: [idUsuario], references: [id])
  items     PedidoItem[]
  poliza    Poliza?
}

model CarritoItem {
  idProducto Int
  idCarrito  Int
  cantidad   Int      @default(1)
  carrito    Carrito  @relation(fields: [idCarrito], references: [id])
  producto   Producto @relation(fields: [idProducto], references: [id])

  @@id([idCarrito, idProducto])
}

model Carrito {
  id        Int           @id @default(autoincrement())
  total     Decimal       @default(0) @db.Money
  moneda    Moneda        @default(ARS)
  updatedAt DateTime      @updatedAt
  items     CarritoItem[]
}

model Pago {
  id        Int          @id @default(autoincrement())
  idPedido  Int          @unique
  pasarela  PasarelaPago
  estado    EstadoPago
  monto     Decimal      @db.Money
  moneda    Moneda       @default(ARS)
  /// preferenceId?: string;  // Mercado Pago
  ///   initPoint?: string;     // MP checkout URL
  ///   No sabemos que hacer todavia con esto ya que
  ///   lo vamos a conectar con MP
  createdAt DateTime     @default(now())
  pedido    Pedido       @relation(fields: [idPedido], references: [id])
}

enum RolUsuario {
  ADMINISTRADOR
  USUARIO
}

enum TipoSeguro {
  AUTO
  HOGAR
  VIDA
  SALUD
}

enum EstadoPoliza {
  PENDIENTE
  CARGADA
}

enum EstadoPedido {
  CREADO
  PENDIENTE_POLIZA
  POLIZA_CARGADA
  PAGO_PENDIENTE
  PAGO_APROBADO
  PAGO_RECHAZADO
  CANCELADO
}

enum Moneda {
  ARS
}

enum PasarelaPago {
  MERCADOPAGO
}

enum EstadoPago {
  CREADO
  PENDIENTE
  APROBADO
  RECHAZADO
  CANCELADO
}
